
#+TITLE: Grisha's Emacs Config
#+AUTHOR: Grisha Khachaturyan
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el
This is *my* personal emacs config file. It is a literate config. Org mode will tangle this config into the co-located init.el file. This config uses lsp-mode and ivy-mode as the primary convenience features. It is a bit disorganized as I've assembled it sporadically over time piece by piece. I'm planning to  refactor this config to be more organized so other's could use it for reference or inspiration. I was primarily inspired by David Wilson's [[https://www.youtube.com/watch?v=74zOY-vgkyw&list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ][Emacs From Scratch]] youtube series.
* Emacs Performace
Increase garbage collection threshold to lower startup time.
#+begin_src emacs-lisp :tangle ./early-init.el
  ;; Set Garbage collection threshold very high at startup
  (setq gc-cons-threshold (* 100 1000 1000))
  ;; For lsp-mode:
  ;;  Increase the amount of data which Emacs reads from the process
  (setq read-process-output-max (* 1024 1024))

  (defvar default-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
#+end_src
Define function to time Emacs startup and determine # of garbage collections
#+begin_src emacs-lisp
  (defun gsh/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))
  (add-hook 'emacs-startup-hook #'gsh/display-startup-time)
#+end_src
* PACKAGE MANAGEMENT
** Setup package.el to work with MELPA.
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives
        '(
          ("gnu" . "https://elpa.gnu.org/packages/")
          ("melpa" . "https://melpa.org/packages/")
          ("nongnu" . "https://elpa.nongnu.org/nongnu/")
          ;("org" . "https://orgmode.org/elpa/")
          ))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

** Installing use-package
#+begin_src emacs-lisp
  ;; (unless (package-installed-p 'use-package)
  ;;   (package-install 'use-package))
  ;; (require 'use-package)
  (setq use-package-always-ensure t)
  (setq use-package-always-defer t)
  (setq use-package-verbose nil)
#+end_src
* System information
#+begin_src emacs-lisp
  (defvar my-macbook-p (equal system-type 'darwin))
  (defvar my-sc-thinkpad-p (equal (system-name) "opamp"))
  (defvar my-steam-deck-p (string-match-p "steamdeck" system-name))
  (defvar perfect-circuit-p (equal (system-name) "Grisha"))
  (defvar my-gnu-linux-p (equal system-type 'gnu/linux))

  (global-auto-revert-mode)        ; revert buffers when changed on disk
#+end_src
* Emacs display settings
#+begin_src emacs-lisp
  (use-package frame
    :ensure nil
    :config
    (when my-macbook-p (setq initial-frame-alist '((fullscreen . maximized)))))

#+end_src
* Emacs System configs
#+begin_src emacs-lisp
  ;; Set Dired default directory
  ;; (setq default-directory "C:/Users/GrishaKhachaturyan/hub/")
  ;; Disable warning spam
  (setq warning-minimum-level :emergency)
  ;; set re-builder sytax to string
  (setq reb-re-syntax 'string)
  ;; keep folders clean
  (setq backup-directory-alist
        `(("." . ,(expand-file-name "tmp/backups" user-emacs-directory))))
  ;; create path for auto save mode
  (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)

  (setq auto-save-list-file-prefix (expand-file-name
                                    "tmp/auto-saves/sessions/"
                                    user-emacs-directory)
        auto-save-file-name-transforms
        `((".*",(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))

  (use-package no-littering
    :demand t)

  ;; Disable lock files. They are interfering with terraform-ls on linux
  (setq create-lockfiles nil)

  ;; Disable emacs creating backup file *~
  (setq make-backup-files nil)
#+end_src
* ORG MODE ADDONS & CONFIGS
** Auto-tangle config files
#+begin_src emacs-lisp
  (defun g/org-babel-tangle-config()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/config.org"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook
                                                #'g/org-babel-tangle-config)))
#+end_src
** Org Customizations
#+begin_src emacs-lisp
  (use-package org
    :pin gnu
    :defer t
    ;; :after (org-timeline)
    :bind
    ("C-c a" . org-agenda)
    (:map org-mode-map
          ("C-c C-f" . hydra-org/org-forward-heading-same-level)
          ("C-c C-b" . hydra-org/org-backward-heading-same-level)
          ("C-c C-p" . hydra-org/org-previous-visible-heading)
          ("C-c C-n" . hydra-org/org-next-visible-heading)
          ("C-c C-u" . hydra-org/outline-up-heading)
          ("M-n" . org-metadown)
          ("M-p" . org-metaup)
          ("C-c C-j" . counsel-org-goto)
          ("C-c t" . org-todo))

    :hook
    (org-mode . visual-line-mode)
    (org-mode . visual-fill-column-mode)
    (org-mode . electric-pair-local-mode)
    :custom
    (org-clock-display-default-range 'untilnow)
    (org-tags-column -55)
    (org-src-window-setup 'current-window)
    (org-hide-emphasis-markers t)
    (org-priority-highest 65)
    (org-priority-lowest 69)
    (org-priority-default 67)
    (org-agenda-window-setup 'current-window)
    (org-agenda-start-with-clockreport-mode t)
    (org-agenda-clockreport-parameter-plist '(:link t :maxlevel 5 :fileskip0 t))
    (org-confirm-babel-evaluate nil)
    (org-cycle-separator-lines -1)
    :config
    (org-babel-do-load-languages 'org-babel-load-languages
                                 (append org-babel-load-languages
                                         '((C . t) (python . t))))
    ;; Org Capture Configuration
    (setq org-default-notes-file (concat org-directory "/notes.org"))
    ;; Org Agenda
    (setq org-agenda-span 'day)
    (setq org-agenda-include-diary nil)
    ;; Add graphical timeline to org agenda
    (add-hook 'org-agenda-finalize-hook 'org-timeline-insert-timeline :append)
    (setq org-agenda-files
          '(
            ;; "~/hub/orgs/my_todos.org"
            "~/hub/orgs/fun.org"
            "~/hub/orgs/music.org"
            "~/hub/orgs/house.org"
            "~/hub/orgs/mind.org"
            "~/hub/orgs/work.org"
            "~/hub/orgs/contracts.org"
            "~/hub/orgs/social.org"
            "~/hub/orgs/job.org"
            "~/hub/orgs/perfect_circuit.org"
            "~/hub/orgs/programming.org"
            ;; "~/hub/new_projects/orgi/orgi_plan.org"
            ;; "~/hub/recording_bullet_journal/super_collider_projects/sc_bujo.org"
            ;; "~/.emacs.d/config.org"
            ))
    (setq org-todo-keywords
          ;; '((sequence "BACKLOG" "TODO(t)" "TEST(s)" "RECUR(r)" "NEXT(n)"  "|" "DONE(d!)"))
          '((sequence "TODO(t)" "RECUR(r)" "CHOOSE(c)" "|" "DONE(d!)"))
          ;; '((sequence "RECUR" "TODO" "CHOOSE" "|" "DONE"))
          )
    (setq org-agenda-start-with-log-mode t)
    (setq org-agenda-log-mode-items '(clock state))
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-startup-indented t)
    (custom-set-faces
     '(org-level-1 ((t (:inherit outline-1 :height 1.20))))
     '(org-level-2 ((t (:inherit outline-2 :height 1.17))))
     '(org-level-3 ((t (:inherit outline-3 :height 1.15))))
     '(org-level-4 ((t (:inherit outline-4 :height 1.12))))
     '(org-level-5 ((t (:inherit outline-5 :height 1.10))))
     )

    (add-to-list 'org-structure-template-alist '("sc" . "src sclang"))
    (add-to-list 'org-structure-template-alist '("se" . "src emacs-lisp"))

    (defhydra hydra-org ()
      "org hydra"
      ("n" org-next-visible-heading "next visible")
      ("p" org-previous-visible-heading "prev visible")
      ("f" org-forward-heading-same-level "forward level")
      ("b" org-backward-heading-same-level "backward level")
      ("u" outline-up-heading "up level")
      ("c" org-comment-dwim "comment")
      ("C-n" org-next-visible-heading)
      ("C-p" org-previous-visible-heading)
      ("C-f" org-forward-heading-same-level)
      ("C-b" org-backward-heading-same-level)
      ("C-u" outline-up-heading)
      ("TAB" org-cycle "cycle")
      ;; ("M-j" org-metadown "move down")
      ;; ("M-k" org-metaup "move up")
      ("q" nil "quit"))
    )

#+end_src
** Org Timeline
#+begin_src emacs-lisp
  ;; org-agenda timeline view
  (use-package org-timeline)
#+end_src
** ORG SUPERSTAR
Adds nice looking bullets to org mode
#+begin_src emacs-lisp
  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode))
#+end_src
** Org-Roam
Slip Card system for organizing thoughts. Zettelkasten Method
#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory "~/hub/org-roam")
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert))
    :config
    (org-roam-db-autosync-mode)
    (org-roam-setup))
#+end_src
** Visual Fill column
#+begin_src emacs-lisp
  (defun scale-visual-fill-column ()
    (interactive)
    (message "Scaling visual fill column")
    (setq visual-fill-column-width
          (- 100 (+ 0 (* 25 text-scale-mode-amount)))))
  (use-package visual-fill-column
    :custom
    (visual-fill-column-center-text t)
    (visual-fill-column-enable-sensible-window-split t)
    (visual-fill-column-adjust-for-text-scale t)
    :hook
    (visual-fill-column-mode . scale-visual-fill-column)
    (text-scale-mode . scale-visual-fill-column)
    )
#+end_src
** COMMENT Org-Roam-UI
#+begin_src emacs-lisp
  (use-package org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src
** Org Pomodoro
#+begin_src emacs-lisp
  (use-package org-pomodoro
    :after org
    :config
    (let ((prefix "")
          (bell_quiet  ".emacs.d/my-statics/pom_sounds/bell_quiet.wav"))
      (cond (my-sc-thinkpad-p (setq prefix "/home/grish/"))
            (my-steam-deck-p (setq prefix "/home/deck/"))
            (my-macbook-p (setq prefix "/Users/Grisha/")))
      (setq bell_quiet (concat prefix bell_quiet))

      (setq org-pomodoro-overtime-sound bell_quiet)
      (setq org-pomodoro-finished-sound bell_quiet)
      (setq org-pomodoro-short-break-sound bell_quiet)
      (setq org-pomodoro-long-break-sound bell_quiet))
    (when my-steam-deck-p
      (setq org-pomodoro-audio-player (executable-find "aplay")))
    (when perfect-circuit-p
      (setq org-pomodoro-audio-player (executable-find "play")))
    :custom

      (org-pomodoro-short-break-length 6)
      (org-pomodoro-ticking-sound-p nil)
      (org-pomodoro-manual-break t))

     ;; The following fixes sounds not working on windows
     ;; (use-package sound-wav)
     ;; (use-package powershell)
#+end_src
* MAGIT (Git Porcelain)
#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status)
#+end_src
* Electricity
#+begin_src emacs-lisp
  (electric-indent-mode)
  (add-hook 'prog-mode-hook 'electric-pair-local-mode)
  ;; (electric-quote-mode)
#+end_src
* Move Lines Up/Down
#+begin_src emacs-lisp
  (defun move-line-up ()
    (interactive)
    (transpose-lines 1)
    (forward-line -2))

  (defun move-line-down ()
    (interactive)
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1))

  (global-set-key (kbd "M-<up>") 'move-line-up)
  (global-set-key (kbd "M-<down>") 'move-line-down)
#+end_src
* MY KEY BINDINGS
** EXITING EMACS
#+begin_src emacs-lisp
  ;; remap save-buffers-kill-terminal from C-x C-c to C-x q
  (if (not (daemonp))
      (global-unset-key (kbd "C-x  C-c"))) ; i always accidentilly press this

  (global-set-key (kbd "C-x q") 'save-buffers-kill-emacs)
#+end_src
** UNMAP ACCIDENTAL KEY PRESSES
#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z"))          ; unmap suspend-frame from C-z
  (global-unset-key (kbd "C-x C-z"))
#+end_src
** SWITCHING VISUAL BUFFERS

#+begin_src emacs-lisp
  ;; switch buffers directionally using ijkl keys similar to right hand wasd
  ;; (global-set-key (kbd "C-c i") 'windmove-up)
  ;; (global-set-key (kbd "C-c k") 'windmove-down)
  ;; (global-set-key (kbd "C-c j") 'windmove-left)
  ;; (global-set-key (kbd "C-c l") 'windmove-right)

  ;; switch buffers directionally using arrow keys
  (global-set-key (kbd "C-c <up>") 'windmove-up)
  (global-set-key (kbd "C-c <down>") 'windmove-down)
  (global-set-key (kbd "C-c <left>") 'windmove-left)
  (global-set-key (kbd "C-c <right>") 'windmove-right)

  ;; add C-c o binding to other-window
  ;; (global-set-key (kbd "C-c o") 'other-window) ; (o)ther

  ;; split buffer with v and h keys
  ;; (global-set-key (kbd "C-c b h") 'split-window-right) ;(h)orizontal
  ;; (global-set-key (kbd "C-c b v") 'split-window-below) ;(v)ertical

  ;; delete other windows
  ;; (global-set-key (kbd "C-c b o") 'delete-other-windows) ; (o)ne window
  ;; (global-set-key (kbd "C-c b c") 'delete-window)        ; (c)lose this window
#+end_src
** SCROLL UP/DOWN LINES WITH: M-j M-k
#+begin_src emacs-lisp
  (global-unset-key (kbd "M-j"))       ; was default-indent-new-line
  (global-unset-key (kbd "M-k"))       ; was kill-sentence
  (global-set-key (kbd "M-j") 'scroll-up-line) ; scroll up
  (global-set-key (kbd "M-k") 'scroll-down-line) ; scroll down
#+end_src
** Whitespace Cleanup on Save
#+begin_src emacs-lisp
  ;; (add-hook 'before-save-hook 'whitespace-cleanup)
#+end_src
** Move half page down with
#+begin_src emacs-lisp
  (defun scroll-up-window-half ()
    "Scroll the buffer window up by half the length of the window."
    (interactive)
    (scroll-up (/ (window-total-height) 2)))
  (defun scroll-down-window-half ()
    "Scroll the buffer window down by half the length of the window."
    (interactive)
    (scroll-down (/ (window-total-height) 2)))

  (global-unset-key (kbd "C-v"))          ; unset default page down key
  (global-unset-key (kbd "M-v"))          ; unset default page up key
  (global-set-key (kbd "C-v") 'scroll-up-window-half)
  (global-set-key (kbd "M-v") 'scroll-down-window-half)
#+end_src
** Change Zap to char
#+begin_src emacs-lisp
  (global-set-key (kbd "M-z") 'zap-up-to-char)
#+end_src
** Timesheet function
#+begin_src emacs-lisp :results silent
  (defun time-dec-to-min (decimal_time)
    (let ((min (round (* (mod decimal_time  1) 60))))
      (if (< min 60)
          (+ (/ min 100.0) (truncate decimal_time))
        (+ 1 (truncate decimal_time)))))

  (defun time-min-to-dec (time)
    (+ (/ (* (mod time 1) 100) 60) (truncate time 1)))

  (defun time-split-hr-min (time)
    (let* ((hr (if (> time 12)
                   (- (truncate time) 12)
                 (truncate time)))
           (min (round (* (mod time 1) 100))))
      (list hr min)))

  (defun worktill (hours daynum clockin &optional minus-hr)
    (let* ((dow (decoded-time-weekday (decode-time (current-time))))
           ;; Calculate Total hours you should work by end of day
           (total_hours (- (* 8 daynum) (if minus-hr minus-hr 0)))
           ;; Calculate the hours you need to work get to total hours
           (delta_hours (- total_hours hours))
           (hours_left (time-split-hr-min (time-dec-to-min delta_hours)))
           ;; convert last clock in time to decimal minutes
           (clockin_dec (time-min-to-dec clockin))
           (clockout (+ clockin_dec delta_hours))
           (clockout_dec (time-dec-to-min clockout))
           (clockout_hr (car (time-split-hr-min clockout_dec)))
           (clockout_min (cadr (time-split-hr-min clockout_dec))))
      (print (format "Total Hours EOD: %d" total_hours))
      (print (format "Worked this week: %.2f" hours))
      (print (format "Last clocked in at: %f" clockin_dec))
      (print (format "Hours left today: %d:%02d"
                     (car hours_left) (cadr hours_left)))
      (print (format "You can leave at: %f" clockout))
      (print (format "You can leave at: %d:%02d" clockout_hr clockout_min))
      (list
       total_hours
       (string-to-number (format "%.2f" clockin_dec))
       (string-to-number (format "%.2f" delta_hours))
       clockout_hr
       clockout_min)))
#+end_src
** Distraction counter
#+begin_src emacs-lisp
  (defun distractions++ ()
    (interactive)
    (if (not (boundp 'distractions-today))
        (setq distractions-today 1)
      (setq distractions-today (+ distractions-today 1)))
    (print distractions-today))

  (defun distractions-reset ()
    (interactive)
    (setq distractions-today 0))
#+end_src
* My Functions
** Easy Insert Underscore (M-SPC)
#+begin_src emacs-lisp
  (global-unset-key (kbd "M-SPC"))
  (defun insert-underscore ()
    "Inserting an underscore '_' character"
    (interactive)
    (insert #x5F))
  (global-set-key (kbd "M-SPC") 'insert-underscore)
#+end_src
* GRAPHICAL USER INTERFACE SETTINGS
Disable Scrollbar.
Show Columns in Modeline.
Display Line Numbers Globaly.
Supress splash screen.
#+begin_src emacs-lisp
(when (display-graphic-p)
  (scroll-bar-mode -1)          ; remove scroll bar
  (column-number-mode)          ; show column number in modline
  (tool-bar-mode -1)
  (menu-bar-mode -1))
  (setq ring-bell-function 'ignore)
  ;;(global-display-line-numbers-mode 1) ; enable line numbers in margin globably
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (setq inhibit-startup-message t)     ; No splash screen
  ;; (global-visual-line-mode t)
  ;; Remove title bar in emacs-plus version on Mac
  ;; (add-to-list 'default-frame-alist '(undecorated . t))
#+end_src
** COMMENT Visible Bell to turn off chime
#+begin_src emacs-lisp
  (setq visible-bell 1)
#+end_src
** Set Default Font
Set the default font for different systems
#+begin_src emacs-lisp

  (when my-macbook-p (set-frame-font "Menlo 14" nil t))

  ;; Set font for windows when you have it
  ;; (set-frame-font "Consolas-11:bold" nil t)

  (when my-gnu-linux-p
    (defun gsh/set-font ()
      (message "Setting font")
      (set-frame-font "DM Mono-10:medium" nil t))

    (if (daemonp)
        (add-hook 'after-make-frame-functions
                  (lambda(frame)
                    (with-selected-frame frame
                      (gsh/set-font))))
      (gsh/set-font)))
#+end_src
* Exec Path From Shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :demand t
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)
      ))
#+end_src
* Spaces OVER TABS
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src
* Whitespace Butler
#+begin_src emacs-lisp
  (use-package ws-butler
    :hook
    (prog-mode . ws-butler-mode)
    (org-mode . ws-butler-mode))
  #+end_src
* THEME
# Currently using the Doom [[https://github.com/tomasr/molokai][Molokai]] Theme
Currently using the [[https://monokai.pro/][Doom Monokai-Classic]] theme.
You can choose a theme by executing *M-x customize-theme* you can turn off the safe dialog by executring *(setq custom-safe-themes t)*

:themes_I_like:
 * doom-ir-black (black theme)
 * doom-moonlight
 * doom-outrun-electric
 * doom-fairy-floss (nice light/dark theme)
 * doom-acario-light (good light theme)
 * doom-acario-dark (black theme)
 * doom-pine
 * doom-old-hope
 * wombat
 * doom-badger
 * doom-dark+
 * doom-gruvbox
 * doom-henna
 * doom-manegarm
 * doom-material-dark
 * doom-snazzy
 * doom-zenburn
 * doom-horizon
 * doom-feather-dark
 * doom-ayu-dark
   To select a theme use 'M-x customize-theme'
:END:
#+begin_src emacs-lisp
  (use-package doom-themes
    :demand t
    :init (setq custom-safe-themes t)
    :custom
    (doom-monokai-classic-brighter-comments t)
    (doom-henna-brighter-comments t)
    ;; (doom-acario-dark-brighter-comments t)
    :config
    (setq doom-themes-enable-bold t     ; if nil, bold is universally disabled
          doom-themes-enable-italic t)  ; if nil, italcs is universally disabled
    ;; (custom-set-variables
    ;; '(doom-molokai-brighter-comments t))

    ;; customize the doom monkai theme
    (custom-set-faces
     '(counsel--mark-ring-highlight ((t (:inherit highlight))))
     ;; '(ivy-current-match ((t (:background "#fd971f" :foreground "black"))))
     '(show-paren-match ((t (:background "#FD971F" :foreground "black"
                                         :weight ultra-bold)))))
    ;; (load-theme 'doom-henna t)
    ;; (load-theme 'doom-oceanic-next t)
    ;; (load-theme 'doom-ayu-dark t)
    ;; (load-theme 'doom-gruvbox-light t))
    (load-theme 'doom-pine t)
    )
#+end_src
** MODE LINE
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1))
#+end_src
** ICONS
#+begin_src emacs-lisp
  (use-package all-the-icons
    :demand t
    :if (display-graphic-p))
#+end_src
*** Icons dired
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    ;; :after all-the-icons
    :hook (dired-mode . all-the-icons-dired-mode)
    :config
    (setq all-the-icons-dired-monochrome nil))
#+end_src
Smart Navigation
These are packages which assist in navigating emacs
* Avy (quickly jump to a char)
#+begin_src emacs-lisp
  (use-package avy
    :bind (("C-:" . avy-goto-char)))
#+end_src
* IVY MODE
Ivy Mode speeds up navigation by perfoming text matching against
possible inputs
#+begin_src emacs-lisp
  (use-package ivy
    :bind (("C-s" . counsel-grep-or-swiper)
           ("C-M-s" . swiper-isearch)
           ;; ("C-S" . swiper-isearch)

           ;; ("C-r" . swiper-backward)
           ;; ("C-c C-r" . ivy-resume)
           ;; ("<f6>" . ivy-resume)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)
           ("C-x f" . counsel-find-file)
           ("C-x d" . counsel-dired)
           ("C-c r" . counsel-recentf)    ; open recent file
           ("C-c f" . counsel-recentf)    ; open recent file
           ("C-c C-f" .  counsel-recentf)
           ("C-h a" . counsel-apropos)
           ("C-h d" . counsel-describe-function)
           ("C-h v" . counsel-describe-variable)
           ("C-h o" . counsel-describe-symbol)
           ("C-h l" . counsel-find-library)
           ("C-h i" . counsel-info-lookup-symbol)
           ("C-h u" . counsel-unicode-char)
           ("C-h b" . counsel-descbinds)
           ("C-x b" . counsel-switch-buffer)
           ("C-c T" . counsel-load-theme)
           :map minibuffer-local-map
           ("C-r" . counsel-minibuffer-history)
           ;; ("C-c g" . counsel-git)
           ;; ("C-c j" . counsel-git-grep)
           ;; ("C-c k" . counsel-ag)
           ;; ("C-x l" . counsel-locate)
           ;; ("C-S-o" . counsel-rhythmbox)
           )
    :config
    (ivy-mode 1))
#+end_src
*** Ivy Hydra
#+begin_src emacs-lisp
  (use-package ivy-hydra)
#+end_src

*** Ivy Rich
Provides function documentation and key binding info in ivy buffer
#+begin_src emacs-lisp
  (use-package ivy-rich
    ;; :after counsel
    :init
    (ivy-rich-mode 1)
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))

#+end_src

*** All the Icons Ivy Rich
#+begin_src emacs-lisp
  (use-package all-the-icons-ivy-rich
    :after ivy
    :init (all-the-icons-ivy-rich-mode 1))
#+end_src
** COUNSEL
#+begin_src emacs-lisp
  (use-package counsel
    :config
    (setq ivy-initial-inputs-alist nil))  ; Don't start searches with ^
#+end_src
* Dired
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :custom ((dired-listing-switches "-ghoa --group-directories-first"))
    :init
    (put 'dired-find-alternate-file 'disabled nil)
    (defun dired-up-alternate-directory ()
      (interactive) (find-alternate-file ".."))
    :bind (:map
           dired-mode-map
           ("h" . dired-up-alternate-directory)
           ("l" . dired-find-alternate-file)
           ("j" . dired-next-line)
           ("k" . dired-previous-line)
           ("J" . dired-goto-file)
           ("K" . kill-buffer-and-window))
    :config
    (when my-macbook-p
      (setq insert-directory-program "gls" dired-use-ls-dired t))
    (setq dired-listing-switches "-ghoa --group-directories-first")
    ;; (setq insert-directory-program "C:\\Program Files\\Git\\usr\\bin\\ls")
    ;; (setq ls-lisp-use-insert-directory-program t)
    )
#+end_src
* WHICH KEY
Given an initial key sequence Which Key provides hints about the next
possible key presses along with documentation for that key press.
#+begin_src emacs-lisp
  (use-package which-key
    :defer 0
    :bind
    (("C-c w w" . which-key-show-major-mode)
     ("C-c w i" . which-key-show-minor-mode-keymap))
    :config
    (setq which-key-idle-delay 0.8)
    (which-key-mode))
#+end_src
* Precient
#+begin_src emacs-lisp
  (use-package ivy-prescient
    :after counsel
    :init
    (ivy-prescient-mode 1)
    :config
    (setq ivy-prescient-retain-classic-highlighting t)
    (prescient-persist-mode))
#+end_src
* Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :defer t
    :custom
    (treemacs-python-executable "python3")
    (treemacs-git-mode nil)
    ;; :config
    ;; (treemacs-project-follow-mode)
    :hook
    (treemacs-select . windmove-right))
  ;; (use-package treemacs-icons-dired
  ;;   :after dired
  ;;   :config (treemacs-icons-dired-mode))
#+end_src
* Rotate Buffers
#+begin_src emacs-lisp
  ;; (use-package rotate)

#+end_src
* Hydra
#+begin_src emacs-lisp
  (use-package hydra
    :init
    (global-unset-key (kbd "C-c b l"))
    :bind (("C-c b" . hydra-windows/body)
           ("C-c o" . hydra-other-window/body))
    )
  ;; hydra to condense other window commands
  (defhydra hydra-other-window ()
    "other window commands"
    ("f" find-file-other-window "find file")
    ("b" counsel-switch-buffer-other-window "switch buffer"))
  ;; Hydra for managing buffers
  (defhydra hydra-windows (global-map "C-c" :hint nil)
    "
  ^Move^       ^Split^           ^Delete^             ^Shift^      ^Misc^
  ^^^^^^^^----------------------------------------------------------------------------------
  _i_: up      _v_: vertical     _o_: other windows   _I_: up      ^ ^
  _k_: down    _h_: horizontal   _d_: this window     _K_: down    _b_: switch buffer
  _j_: left    ^ ^               ^ ^                  _J_: left    _F_: find file
  _l_: right   ^ ^               ^ ^                  _L_: right   _p_: switch project
  "
    ("l" windmove-right)
    ("j" windmove-left)
    ("i" windmove-up)
    ("k" windmove-down)
    ("v" split-window-below)
    ("h" split-window-right)
    ("d" delete-window)
    ("o" delete-other-windows)
    ("I" buf-move-up)
    ("K" buf-move-down)
    ("J" buf-move-left)
    ("L" buf-move-right)
    ;; ("r" rotate-layout)
    ("b" counsel-switch-buffer)
    ("F" counsel-find-file)
    ("p" project-switch-project)
    ;; ("g" revert-buffer-quick)
    ("q" nil "quit"))
#+end_src
* IDE LIKE PACKAGES
Code Completion, Documentaion, Syntax checking, Jump to Definition.
** Language Server Protocol Packages
A Language Server provides: syntax checking, error correction,
and jump to definition functionality for a particular language
*** COMMENT EGLOT (Disabled)
#+begin_src emacs-lisp
  ;; Setup eglot to wordk with clangd-10 (LSP for C/C++)
  ;; (use-package eglot
  ;;   :config
  ;;   (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd-10"))
  ;;   (add-hook 'c-mode-hook 'eglot-ensure)
  ;;   (add-hook 'c++-mode-hook 'eglot-ensure))
#+end_src
*** DONE make alias for clangd -> clangd-10


*** LSP MODE (Enabled)

#+begin_src emacs-lisp
  (use-package lsp-mode
    ;; :after flycheck
    :commands (lsp lsp-deferred)
    :bind (:map lsp-mode-map
                ("M-." . lsp-find-definition))
    :init
    (setq lsp-keymap-prefix "C-x l")
    ;; (setq lsp-use-plists t)
    ;; (lsp-treemacs-sync-mode 1)
    :hook
    ;; (js-mode . lsp-deferred)
    (terraform-mode . lsp-deferred)
    ;; (lsp-mode . lsp-treemacs-symbols)
    ;; (lsp-mode . treemacs-select-window)
    ;; :custom
    ;; ;; (lsp-terraform-server "C:/Users/GrishaKhachaturyan/stand_alone_prgrms/bin/terraform-lsp")
    ;; (lsp-terraform-ls-server
    ;;  "C:/Users/GrishaKhachaturyan/.vscode/extensions/hashicorp.terraform-2.25.1-win32-x64/bin/terraform-ls"
    ;;  )
    :custom
    (lsp-modeline-code-actions-enable nil)
    ;; (lsp-treemacs-error-list-severity 1)
    :config
    ;; (setq lsp-disabled-clients '(tfls))
    (lsp-enable-which-key-integration t)
    (lsp-modeline-code-actions-mode -1)
    ;; (setq lsp-modeline-diagnostics-enable nil)
    (with-eval-after-load 'lsp-mode
      (add-to-list 'lsp-file-watch-ignored-directories
                   "[/\\\\]\\\.env.*\\'")))
#+end_src
** LSP-UI
#+begin_src emacs-lisp
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :config
    ;; (setq lsp-eldoc-enable-hover nil)
    (setq lsp-ui-enable-hover nil)
    ;; (setq lsp-ui-sideline-code-actions nil)

    (setq lsp-ui-doc-show-with-cursor t)
    (setq lsp-ui-doc-position 'bottom)
    (setq lsp-signature-auto-activate nil)
    (setq lsp-signature-render-documentation nil))
#+end_src
**** TODO open treemacs window for lsp only after C-u argument prefix

**** Sideline
#+begin_src emacs-lisp
  ;; (use-package sideline
  ;;   :after lsp-mode

  ;;   :init
  ;;   (setq sideline-backends-right '(sideline-lsp)))
#+end_src

*** LSP-Ivy integration
#+begin_src emacs-lisp
  (use-package lsp-ivy
    :init
    (defun ivy-update-candidates-dynamic-collection-workaround-a (old-fun &rest args)
      (cl-letf (((symbol-function #'completion-metadata) #'ignore))
        (apply old-fun args)))
    (advice-add #'ivy-update-candidates :around #'ivy-update-candidates-dynamic-collection-workaround-a)
    )

#+end_src

** Debuggers
*** DAPE-Mode
An newer alternative Debug Adapter Protocol for Emacs [[https://github.com/svaante/dape][docs]]
#+begin_src emacs-lisp
  (use-package dape
    :hook
    (kill-emacs . dape-breakpoint-save)
    (after-init . dape-breakpoint-load)
    (prog-mode . eldoc-mode)
    :config
    (dape-breakpoint-global-mode)
    ;; (setq dape-request-timeout 60)
    (setq dape-inlay-hints t)
    (add-to-list 'dape-configs
                 `(js-debug-node-noworker
                   modes (js2-mode js-mode js-ts-mode)
                   host "localhost"
                   port 8123
                   command "node"
                   ;; command-args '("/home/grish/.emacs.d/var/dape-adapters/js-debug/src/dapDebugServer.js" 8123)
                   command-args (,(expand-file-name
                                   (file-name-concat dape-adapter-dir
                                                     "js-debug"
                                                     "src"
                                                     "dapDebugServer.js"))
                                 :autoport)
                   :type "pwa-node"
                   :request "launch"
                   ;; :program "index.js"
                   :cwd dape-cwd
                   :runtimeExecutable "npm"
                   :runtimeArgs ["run-script" "noworker"]
                   :pauseForSourceMap nil
                   ;; :args ("run" "dev")
                   :console "internalConsole"
                   )))
#+end_src

**** Repeat
This package is recomended for dape mode
#+begin_src emacs-lisp
  (use-package repeat
    :hook
    (dape-mode . repeat-mode))
#+end_src
*** DAP-MODE
Dap mode is an emacs interface to the [[https://code.visualstudio.com/api/extension-guides/debugger-extension][Debug Adapter Protocol]]
Instructions/Documentation on configuration files can be found [[https://github.com/llvm/llvm-project/tree/main/lldb/tools/lldb-vscode][here]]
Thread/Session attaching fixed. But dap-mode is still buggy.
It errors out randomly disconnects.
When debugging python dap-mode does not stop at breakpoints. (check back later).
(possible solution is to upgrade debugpy)
[[https://github.com/emacs-lsp/dap-mode/issues/678][This issue]] and [[https://github.com/emacs-lsp/lsp-treemacs/issues/144][this one]] highlight the issue.
:dap_drawer:
#+begin_src emacs-lisp
   (use-package dap-mode
     ;; :ensure t
     :commands dap-debug
     :hook
     (dap-session-created . dap-ui-show-many-windows)
     ;; (dap-session-created . dap-ui-switch-session)
     :config
     (require 'dap-ui)
     (dap-mode 1)
     (dap-ui-mode 1)
     ;; (dap-auto-configure-mode 1)
     (dap-tooltip-mode 1)
     (dap-ui-controls-mode 0)
     (setq dap-ui-buffer-configurations
           `(("*dap-ui-locals*" (side . left) (slot . 1) (window-width . 0.2))
             ("*dap-ui-expressions*" (side . left) (slot . 2) (window-width . 0.2))
             ("*dap-ui-breakpoints*" (side . right) (slot . 1) (window-width . 35))
             ("*debug-window*" (side . bottom) (slot . 3) (window-width . 0.2))
             ("*dap-ui-sessions*" (side . bottom) (slot . 2) (window-width . 0.2))
             ("*dap-ui-repl*" (side . bottom) (slot . 1) (window-width . 0.2))))
     (setq dap-ui-locals-expand-depth 3)
     (setq dap-ui-expressions-expand-depth 3)
     )


  ;; (setq dap-print-io t))

  ;; lldb config
  ;; (setq dap-lldb-debug-program '("/usr/local/opt/llvm/bin/lldb-vscode"))
  ;; (setq dap-lldb-debug-program '("/usr/local/bin/lldb-vscode"))
#+end_src
*** Real-GUD
Trying this debugger
#+begin_src emacs-lisp
  (use-package realgud)                   ; RealGUD debugger
#+end_src
** COMPANY MODE (Code Complettion)
COMplete ANYthing: Code completion framework.
#+begin_src emacs-lisp
  (use-package company
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    (company-tooltip-idle-delay 0.0)
    (company-candidates-cache t)
    :hook
    (prog-mode . company-mode)            ; add completion to programming language modes
    (inferior-python-mode-hook . company-mode)
    ;; (org-mode . company-mode)            ; add completion to org-mode
    )
  ;; :config
  ;; (add-hook 'after-init-hook 'global-company-mode)

  ;; (use-package company-box          ; Show icons in company complettions
  ;;   :hook (company-mode . company-box-mode))
#+end_src

** Flycheck (better sytax checker)
Syntax checking and linting.
#+begin_src emacs-lisp

  (use-package flycheck
    ;; :custom
    ;; (flycheck-python-pycompile-executable "python")
    ;; (flycheck-python-pylint-executable "pylint")
    ;; (flycheck-python-pyright-executable "python")
    ;; (flycheck-python-mypy-executable "python")
    ;; (flycheck-python-flake8-executable "python")

    )
#+end_src

** iEdit(edit multiple lines simulatneously)
#+begin_src emacs-lisp
  (use-package iedit)

#+end_src
** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :config (yas-global-mode 1))
#+end_src
* Treesitter
#+begin_src emacs-lisp
  (use-package treesit
    :ensure nil
    :config
    (setq treesit-extra-load-path '("/usr/local/lib")))
#+end_src
* Programming Languages
** C/C++
#+begin_src emacs-lisp
  (use-package cc
    :ensure nil
    :mode ("\\.keymap\\'" . c-mode)
    :hook
    (c++-mode . lsp-deferred)
    (c-mode . lsp-deferred)
    :config
    (require 'dap-cpptools)
    (require 'dap-lldb)                  ; not stopping at breakpoints. look at upgrading
    (dap-cpptools-setup)

    (dap-register-debug-template
     "cpptools::Run Configuration reverse_string"
     (list :type "cppdbg"
           :request "launch"
           :name "cpptools::Run Configuration"
           :MIMode "gdb"
           :program "${workspaceFolder}/cpp/reverse_string"
           :cwd "${workspaceFolder}/cpp"))
    ;; Debug Configuration for reverse_string.cpp
    (dap-register-debug-template
     "LLDB::Run reverse_string"
     (list :type "lldb-vscode"
           :request "launch"
           :cwd "${workspaceFolder}cpp/"
           :program "${workspaceFolder}cpp/reverse_string"
           :name "LLDB::Run reverse_string")))
#+end_src

** Docker
#+begin_src emacs-lisp
  (use-package dockerfile-mode)
  (use-package docker)
#+end_src
** SuperCollider
*** SuperCollider scel (sclang mode for emacs)
This is a mode for the sclang language for SuperCollider
#+begin_src emacs-lisp
  (use-package sclang
    :ensure nil
    :demand t
    :load-path
    (lambda ()
      (cond
       (my-steam-deck-p
        "/home/deck/.local/share/SuperCollider/downloaded-quarks/scel/el")
       (my-macbook-p
        "/Users/Grisha/Library/Application Support/SuperCollider/downloaded-quarks/scel/el")
       (my-sc-thinkpad-p
        "~/.local/share/SuperCollider/downloaded-quarks/scel/el")
       (my-gnu-linux-p "/usr/local/share/emacs/site-lisp/SuperCollider/")))
    :mode ("\\.scd\\'" . sclang-mode)
    :bind (:map sclang-mode-map
               ("C-c C-l"    . sclang-eval-line)
               ("C-<return>" . sclang-eval-defun)
               ("C-." . sclang-main-stop)
               ("C-c C-h" . sclang-find-help-in-gui))
    :custom
    (sclang-eval-line-forward nil)
    :config
    (unbind-key "C-c h" sclang-mode-map)
    (when my-macbook-p
      (setq exec-path
            (append
             exec-path
             '("/Applications/SuperCollider.app/Contents/MacOS/"))))
    (require 'sclang))
#+end_src

#+RESULTS:
: sclang-find-help-in-gui

*** Org Babel SuperCollider
Package to add supercollider support to org-babel
#+begin_src emacs-lisp
  (use-package ob-sclang
    :ensure nil
    :demand t
    :bind (:map org-mode-map
                ("C-." . sclang-main-stop))
    :load-path
    (lambda ()
      (cond
       (my-macbook-p "/Users/Grisha/.emacs.d/git-lisp/ob-sclang")
       (my-sc-thinkpad-p "/home/grish/.emacs.d/git-lisp/ob-sclang")
       (my-steam-deck-p "/home/deck/.emacs.d/git-lisp/ob-sclang")))
    :config
    (org-babel-do-load-languages 'org-babel-load-languages
                                 (append org-babel-load-languages
                                         '((sclang . t) ))))
#+end_src


** Python
#+begin_src emacs-lisp
  (use-package python
    :ensure nil
    :custom
    ;; python config
    (dap-python-executable "python3")
    (dap-python-debugger 'debugpy)

    ;; :bind ( :map python-mode-map
    ;;         ("C-c r" . nil))
    :hook
    (python-mode . lsp-deferred)
    ;; (lsp-diagnostics-mode . (lambda ()
    ;;                           ;; (flycheck-add-next-checker
    ;;                           ;;  'lsp 'python-pylint)
    ;;                           ;; (flycheck-disable-checker 'lsp)
    ;;                           ;; (flycheck-select-checker 'python-pylint)
    ;;                           ))
    :config
    (require 'dap-python)                ; also not stopping at breakpoints. look at upgrading
    ;; (setq py-python-command "python3")
    ;; (setq py-shell-name "python")
    ;; (setq lsp-pylsp-server-command "~/.local/bin/pylsp")
    (setq python-shell-interpreter "python3")
    ;; Debug Configuration for python unittest
    (dap-register-debug-template
     "Python :: Run unittest (buffer)"
     (list :type "python"
           :args ""
           :cwd nil
           :program nil
           :module "unittest"
           :request "launch"
           :name "Python :: Run unittest (buffer)"))
    ;; Debug Configuration for python file which reads from stdin
    (dap-register-debug-template
     "Python :: Run file User Input (buffer)"
     (list :type "python"
           :args ""
           :cwd nil
           :module nil
           :program nil
           :console "integratedTerminal"  ; launches vterm
           :request "launch"
           :name "Python :: Run file User Input (buffer)"))
    (dap-register-debug-template
     "Python :: Debug PDF args"
     (list :type "python"
           :cwd nil
           :module nil
           :program nil
           :console "integratedTerminal"  ; launches vterm
           :request "launch"
           :name "Python :: Run file User Input (buffer)"
           :args "~/hub/ripl/pw-backend/src/pw_backend_app/parser/MW-562withoutfein_filled_out2.pdf"))

    )
#+end_src
Was getting encoding errors in run-python buffer on windows
This [[https://emacs.stackexchange.com/questions/31282/unicodeencodeerror-executing-python-in-emacs-not-in-terminal][stackexchange]] answer suggested the following fix
#+begin_src emacs-lisp
  ;; fix run-python codec errors on windows
  (setenv "LANG" "en_US.UTF-8")
  (setenv "PYTHONIOENCODING" "utf-8")
#+end_src
*** Virtual Environemnt
#+begin_src emacs-lisp
  (use-package pyvenv)
#+end_src
*** PUG templates for Express framework
#+begin_src emacs-lisp
  (use-package pug-mode)
#+end_src

** Javascript
*** js2 mode
#+begin_src emacs-lisp
  (use-package js2-mode
    :custom
    (js2-strict-missing-semi-warning nil)
    (js-indent-level 2)
    :mode ("\\.js\\'")
    :hook
    (js2-mode . lsp-deferred)
    :config
    (require 'dap-node)
    (dap-register-debug-template
     "Node: run script: noworker"
     (list :type "node"
           :request "launch"
           :name "Run Script: noworker"
           :cwd "${workspaceFolder}"
           :program ""
           :sourceMaps t
           :skipFiles ["<node_internals>/**"]
           :runtimeExecutable "npm"
           :runtimeArgs '("run" "noworker")
           :console "integratedTerminal"))
    (dap-register-debug-template
     "Node: Launch File"
     (list :type "node"
           :request "launch"
           :name "Node: Launch File"
           :program "${file}"
           :sourceMaps t
           :skipFiles '("<node_internals>/**" "${workspaceFolder}/node_modules/**/*.js")
           :console "integratedTerminal"))
    )
#+end_src
*** typescript mode
#+begin_src emacs-lisp
  (use-package typescript-ts-mode
    :ensure nil
    ;; :mode ("\\.ts\\'" "\\.js\\'")
    :mode ("\\.ts\\'")
    :hook
    (typescript-ts-mode . lsp-deferred))
#+end_src
*** tsx-ts-mode
#+begin_src emacs-lisp
  (use-package tsx-ts-mode
    :ensure nil
    :mode ("\\.tsx\\'")
    :hook (tsx-ts-mode . lsp-deferred))
#+end_src
*** jtsx mode
This mode expands
#+begin_src emacs-lisp
  (use-package jtsx
    :custom
    (typescript-ts-mode-indent-offset 4)
    :mode
    ("\\.tsx\\'" . jtsx-tsx-mode)

    ;; ("/client\(/[^/]+\)+\\.js\\'" . jtsx-jsx-mode)
    :hook
    (jtsx-jsx-mode . lsp-deferred)
    ;; (jtsx-js-mode . lsp-deferred)
    ;; :config
    ;; (setq standard-indent 2)
    )
  ;;                           (if (eq major-mode 'tsx-ts-mode)
  ;;                               (flycheck-select-checker
  ;;                                'javascript-eslint))
#+end_src
*** rjsx mode
#+begin_src emacs-lisp
  (use-package rjsx-mode
    :mode
    ("\\.jsx\\'" . rjsx-mode)
    ("\\/client\\/.*\\.js\\'" . rjsx-mode)
    :hook
    (rjsx-mode . lsp-deferred))
#+end_src
*** JSON
#+begin_src emacs-lisp
  (use-package json-ts-mode
    :ensure nil
    :mode ("\\.json\\'")
    :hook
    (json-ts-mode . lsp-deferred)
    :config
    (setq js-indent-level 2))
#+end_src
*** COMMENT JSDOC
#+begin_src emacs-lisp
  (use-package jsdoc)
#+end_src

** Fish Shell script mode
#+begin_src emacs-lisp
(use-package fish-mode)
#+end_src
** CSharp
#+begin_src emacs-lisp
  (use-package csharp-mode
    :ensure nil
    :hook
    (c-sharp-mode . lsp-deferred))
#+end_src

** Shader
#+begin_src emacs-lisp
(use-package shader-mode)
#+end_src
** Terraform
#+begin_src emacs-lisp
  (use-package terraform-mode
    :defer t)
#+end_src
** Keymaps (Devicetree mode)
#+begin_src emacs-lisp
  (use-package dts-mode
    :mode "\\.keymap\\'"
    :custom
    (tab-width 4)
    (truncate-lines t)
    ;;(display-line-numbers 'relative)
    )
#+end_src

** COMMENT Yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :config
    (require 'yaml-mode)
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+end_src
** COMMENT Web Mode
#+begin_src emacs-lisp
  (use-package web-mode
    :mode
    ("\\.html"))
#+end_src
** Arduino Mode
#+begin_src emacs-lisp
  (use-package arduino-mode
    :mode ("\\.ino\\'" . arduino-mode))
#+end_src

** PHP Mode
#+begin_src emacs-lisp
  (use-package php-mode)
#+end_src
** Apache Mode
#+begin_src emacs-lisp
  (use-package apache-mode)
#+end_src
** Markdown
#+begin_src emacs-lisp
  (use-package markdown-preview-mode)
#+end_src
* Treesitter
#+begin_src emacs-lisp
  (use-package treesit
    :ensure nil
    :config
    (setq treesit-extra-load-path '("/usr/local/lib")))
#+end_src
* VTERM
A very good shell in emacs
Notes: need to find a way to execute bash profile.
current way interferes with dap-mode terminal input
#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :config
    (when (or my-gnu-linux-p my-steam-deck-p) (setq vterm-shell "/usr/bin/fish"))
    ;; :hook
    ;; turn off line numbers in vterm
    ;; (vterm-mode . (lambda () (display-line-numbers-mode 0)))
    ;; execute bash_profile for this terminal session
    ;; :hook
    ;; (vterm-mode . (lambda () (vterm-send-string "source ~/.bash_profile\n")))
    )
#+end_src
* Raindbow Delimiters
Color delimiters like parens and braces according to their depth
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
* Padding
#+begin_src emacs-lisp
  (use-package spacious-padding
    :ensure t
    :hook (after-init . spacious-padding-mode)
    :config
    (setq spacious-padding-widths
          '(:internal-border-width 15 :header-line-width 4 :mode-line-width 6 :tab-width 4
                                   :right-divider-width 10 :scroll-bar-width 8 :fringe-width 8))
    )
#+end_src
* Solair
Distinguish between file buffers and pure buffers
#+begin_src emacs-lisp
  (use-package solaire-mode
    :ensure t
    :hook (after-init . solaire-global-mode))
#+end_src
* Helpful (better help documentation)
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    (("C-h ." . helpful-at-point)    ; show help docs for current symbol
     ("C-h j" . helpful-at-point)
     ([remap describe-function] . counsel-describe-function)
     ([remap describe-command] . helpful-command)
     ([remap describe-variable] . counsel-describe-variable)
     ([remap describe-key] . helpful-key)
     :map helpful-mode-map
     ("k" . kill-buffer-and-window)))
#+end_src
* DASHBOARD
#+begin_src emacs-lisp
  (use-package dashboard
    :demand t
    :after (all-the-icons)
    :init
    ;; (setq dashboard-center-content nil)
    (setq dashboard-display-icons-p t)
    (setq dashboard-icon-type 'nerd-icons)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    :config
    (setq line-move-visual nil)
    (setq dashboard-set-navigator nil)
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-center-content t)
    (setq dashboard-projects-backend 'project-el)
    (setq dashboard-items '((agenda . 6)
                            (projects . 5)
                            (recents . 5)
                            ))
    ;; (setq dashboard-page-separator "\n\f\n")
    (setq dashboard-agenda-sort-strategy
          '(todo-state-down
            priority-up
            time-up))
    (setq dashboard-agenda-time-string-format "%b %d %Y %a %I:%M %p")
    ;; (setq dashboard-agenda-prefix-format " %i %-12:c %s ")
    ;; (setq dashboard-agenda-prefix-format "|%i %s %t | %-12c | ")
    ;; (setq dashboard-agenda-prefix-format "|%i %s %t | ")
    (setq dashboard-agenda-prefix-format "%i %s %t| ")
    (setq dashboard-agenda-release-buffers t)
    ;; (setq initial-buffer-choice
    ;;       (lambda () (get-buffer-create "*dashboard*")))
    (dashboard-setup-startup-hook)
    ;; dashboard icons don't quite load.
    ;; buffer needs to be reverted
    ;; This line caused magit-commit to break
    ;; (add-hook 'server-after-make-frame-hook
    ;;           'revert-buffer)
    )

#+end_src

** COMMENT PAGE BREAK LINES
#+begin_src emacs-lisp
  (use-package page-break-lines
    :demand t
    :config (page-break-lines-mode))
#+End_src

** DASHBOARD LS
#+begin_src emacs-lisp
  (use-package dashboard-ls
    :demand t)
#+end_src
* Save History
#+begin_src emacs-lisp
  (use-package savehist
    :after counsel
    :init
    (savehist-mode 1)
    (setq history-length 25))
#+end_src
* PDF-Tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :mode ("\\.pdf\\'" . pdf-view-mode))
#+end_src
* Epub reader nov-mode
#+begin_src emacs-lisp
  (defun my-nov-font-setup ()
    (face-remap-add-relative 'variable-pitch
			     :family "Liberation Serif"
			     :height 1.0))
  (use-package nov
    :mode ("\\.epub\\'" . nov-mode)
    :hook
    (nov-mode . my-nov-font-setup)
    (nov-mode . visual-line-mode)
    (nov-mode . visual-fill-column-mode)
    :custom
    (nov-text-width 80)
    (nov-text-width t))
#+end_src
* Garbage Collection
#+begin_src emacs-lisp
  ;; Set Garbage collection threshold back down after startup completes
  (add-hook 'emacs-startup-hook
        (lambda ()
          ;; (setq gc-cons-threshold (* 100 1000 1000))
          (setq file-name-handler-alist default-file-name-handler-alist)))
          ;;(setq gc-cons-threshold (* 2 1000 1000))))
#+end_src
* COMMENT Buffer Move
Simplify Swapping buffers
#+begin_src emacs-lisp
  (use-package buffer-move
    ;; :bind (("C-c b l" . buf-move-right)
    ;;        ("C-c b j" . buf-move-left)
    ;;        ("C-c b i" . buf-move-up)
    ;;        ("C-c b k" . buf-move-down))
    )
#+end_src
* COMMENT Beacon (Flash the Cursor)
#+begin_src emacs-lisp
  (use-package beacon
    :config (beacon-mode 1))
#+end_src
* COMMENT Display time in the modeline
#+begin_src emacs-lisp
  (setq display-time-default-load-average nil)
  (display-time)
#+end_src
* COMMENT w3m (Web Browser for emacs)
Installed this to browse Help documentation for SuperCollider
#+begin_src emacs-lisp
  (use-package w3m)
#+end_src
* COMMENT Projectile (Project Management)
#+begin_src emacs-lisp
  (use-package projectile
    :config (projectile-mode)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; (when (file-directory-p "~/hub")
    ;;   (setq projectile-project-search-path
    ;;         '("~/hub/new_projects"
    ;;           "~/hub/recording_bullet_journal/super_collider_projects")))
    (setq projectile-switch-project-action #'projectile-dired))
#+end_src
* TODOS:
** TODO ADD Table of Contents for this document.
** TODO ADD general.el package (keybindings package).
** TODO TRY ergomacs or god-mode or evil mode.
** TODO TRY [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] mode. video: [[https://youtu.be/VcgjTEa0kU4?list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ&t=2495][here]]
** TODOS: URGENT | For Work
*** TODO Learn to configure Company Mode
*** TODO Customize faces per theme
*** TODO 'C-c c b' command to create comment block
*** DONE Create Shortcut for lsp-find-references
*** DONE Setup Hydra
*** DONE Setup Tree-Sitter
