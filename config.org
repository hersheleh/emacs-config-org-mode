#+TITLE: Grisha's Emacs Config
#+AUTHOR: Grisha Khachaturyan

*** TODOS:
**** TODO ADD Table of Contents for this document.
**** TODO ADD general.el package (keybindings package).
**** TODO TRY ergomacs or god-mode or evil mode.
**** TODO TRY [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] mode. video: [[https://youtu.be/VcgjTEa0kU4?list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ&t=2495][here]]


* PACKAGE MANAGEMENT

** Setup package.el to work with MELPA.

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives
        '(("melpa" . "https://melpa.org/packages/")
          ("org" . "https://orgmode.org/elpa/")
          ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

#+end_src

** Installing use-package

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* MY KEY BINDINGS

** EXITING EMACS
#+begin_src emacs-lisp
  ;; remap save-buffers-kill-terminal from C-x C-c to C-x q
  (global-unset-key (kbd "C-x  C-c")) ; i always accidentilly press this key
  (global-set-key (kbd "C-x q") 'save-buffers-kill-emacs)
#+end_src

** UNMAP ACCIDENTAL KEY PRESSES
#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z"))          ; unmap suspend-frame from C-z
#+end_src

** SWITCHING VISUAL BUFFERS

#+begin_src emacs-lisp
  ;; switch buffers directionally using ijkl keys similar to right hand wasd
  (global-set-key (kbd "C-c i") 'windmove-up)
  (global-set-key (kbd "C-c k") 'windmove-down)
  (global-set-key (kbd "C-c j") 'windmove-left)
  (global-set-key (kbd "C-c l") 'windmove-right)

  ;; switch buffers directionally using arrow keys
  (global-set-key (kbd "C-c <up>") 'windmove-up)
  (global-set-key (kbd "C-c <down>") 'windmove-down)
  (global-set-key (kbd "C-c <left>") 'windmove-left)
  (global-set-key (kbd "C-c <right>") 'windmove-right)

  ;; add C-c o binding to other-window
  (global-set-key (kbd "C-c o") 'other-window)
#+end_src

** SCROLL UP/DOWN LINES WITH: M-j M-k
#+begin_src emacs-lisp
  (global-unset-key (kbd "M-j"))       ; was default-indent-new-line
  (global-unset-key (kbd "M-k"))       ; was kill-sentence
  (global-set-key (kbd "M-j") 'scroll-up-line) ; scroll up
  (global-set-key (kbd "M-k") 'scroll-down-line) ; scroll down
#+end_src

** Whitespace Cleanup on Save
#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'whitespace-cleanup)
#+end_src

* My Functions
** Easy Insert Underscore (M-SPC)
#+begin_src emacs-lisp
  (global-unset-key (kbd "M-SPC"))
  (defun insert-underscore ()
    "Inserting an underscore '_' character"
    (interactive)
    (insert #x5F))
  (global-set-key (kbd "M-SPC") 'insert-underscore)
#+end_src

* GRAPHICAL USER INTERFACE SETTINGS
Disable Scrollbar.
Show Columns in Modeline.
Display Line Numbers Globaly.
Supress splash screen.
#+begin_src emacs-lisp
  (scroll-bar-mode -1)          ; remove scroll bar
  (column-number-mode)          ; show column number in modline
  ;;(global-display-line-numbers-mode 1) ; enable line numbers in margin globably
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (setq inhibit-startup-message t)     ; No splash screen
#+end_src

** Set Default Font
Sets font for MacOS X emacs
#+begin_src emacs-lisp
  (set-frame-font "Menlo 14" nil t)
#+end_src

* Beacon (Flash the Cursor)
#+begin_src emacs-lisp
    (use-package beacon
      :config (beacon-mode 1))
#+end_src

* Spaces OVER TABS
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

* THEME
# Currently using the Doom [[https://github.com/tomasr/molokai][Molokai]] Theme
Currently using the [[https://monokai.pro/][Doom Monokai-Classic]] theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :custom
    (doom-monokai-classic-brighter-comments t)
    :config
    (setq doom-themes-enable-bold t     ; if nil, bold is universally disabled
          doom-themes-enable-italic t)  ; if nil, italcs is universally disabled
    ;; (custom-set-variables
     ;; '(doom-molokai-brighter-comments t))
    (load-theme 'doom-monokai-classic t))
#+end_src
** MODE LINE
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1))

#+end_src
** ICONS
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+end_src

* Smart Navigation
These are packages which assist in navigating emacs
** Find Recent Files
#+begin_src emacs-lisp
(recentf-mode 1)
#+end_src
** WHICH KEY
Given an initial key sequence Which Key provides hints about the next
possible key presses along with documentation for that key press.
#+begin_src emacs-lisp
  (use-package which-key
    :bind
    (("C-c w" . which-key-show-full-keymap))
    :config
    (which-key-mode))
#+end_src

** IVY MODE
Ivy Mode speeds up navigation by perfoming text matching against
possible inputs
#+begin_src emacs-lisp
  (use-package ivy
    ;; :diminish
    :bind (("C-s" . swiper)
           ;; ("C-c C-r" . ivy-resume)
           ;; ("<f6>" . ivy-resume)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)
           ("C-x C-r" . counsel-buffer-or-recentf) ; open recent file or buffer
           ("C-h d" . counsel-describe-function)
           ("C-h v" . counsel-describe-variable)
           ("C-h o" . counsel-describe-symbol)
           ("C-h l" . counsel-find-library)
           ("C-h i" . counsel-info-lookup-symbol)
           ("C-h u" . counsel-unicode-char)
           ("C-x b" . counsel-switch-buffer)
           ("C-c t" . counsel-load-theme)
           :map minibuffer-local-map
           ("C-r" . counsel-minibuffer-history)
           ;; ("C-c g" . counsel-git)
           ;; ("C-c j" . counsel-git-grep)
           ;; ("C-c k" . counsel-ag)
           ;; ("C-x l" . counsel-locate)
           ;; ("C-S-o" . counsel-rhythmbox)
           )
    :config
    (ivy-mode 1))
#+end_src

*** Ivy Rich
Provides function documentation and key binding info in ivy buffer
#+begin_src emacs-lisp
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
#+end_src

** COUNSEL
#+begin_src emacs-lisp
  (use-package counsel
    :config
    (setq ivy-initial-inputs-alist nil))  ; Don't start searches with ^
#+end_src

* MAGIT (Git Porcelain)
#+begin_src emacs-lisp
  (use-package magit)
#+end_src

* Treemacs
#+begin_src emacs-lisp
  (use-package treemacs)
#+end_src

* IDE LIKE PACKAGES
Code Completion, Documentaion, Syntax checking, Jump to Definition.
** Language Server Protocol Packages
A Language Server provides: syntax checking, error correction,
and jump to definition functionality for a particular language

*** EGLOT (Disabled)
#+begin_src emacs-lisp
  ;; Setup eglot to wordk with clangd-10 (LSP for C/C++)
  ;; (use-package eglot
  ;;   :config
  ;;   (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd-10"))
  ;;   (add-hook 'c-mode-hook 'eglot-ensure)
  ;;   (add-hook 'c++-mode-hook 'eglot-ensure))
#+end_src
***** DONE make alias for clangd - clangd-10

*** LSP MODE (Enabled)
#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    ;; :init
    ;; (setq lsp-keymap-prefix "C-l")

    :hook
    (c++-mode . lsp)
    (python-mode . lsp)

    :config
    (lsp-enable-which-key-integration t))


  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode))
    :config
    (setq lsp-ui-doc-position 'bottom)


#+end_src

** Debuggers

*** DAP-MODE
Dap mode is an emacs interface to the [[https://code.visualstudio.com/api/extension-guides/debugger-extension][Debug Adapter Protocol]]
Instructions/Documentation on configuration files can be found [[https://github.com/llvm/llvm-project/tree/main/lldb/tools/lldb-vscode][here]]
Thread/Session attaching fixed. But dap-mode is still buggy.
It errors out randomly disconnects.
When debugging python dap-mode does not stop at breakpoints. (check back later).
(possible solution is to upgrade debugpy)
[[https://github.com/emacs-lsp/dap-mode/issues/678][This issue]] and [[https://github.com/emacs-lsp/lsp-treemacs/issues/144][this one]] highlight the issue.
:dap_drawer:
#+begin_src emacs-lisp
  (use-package dap-mode
    :ensure t
    :after lsp-mode

    :custom
    ;; python config
    (dap-python-executable "python3.10")
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-ui)
    (require 'dap-cpptools)
    (require 'dap-lldb)                  ; not stopping at breakpoints. look at upgrading
    (require 'dap-python)                ; also not stopping at breakpoints. look at upgrading

    ;; (dap-auto-configure-mode 1)
    (dap-cpptools-setup)
    (dap-mode 1)
    (dap-ui-mode 1)
    (dap-tooltip-mode 1)
    (dap-ui-controls-mode 1)

    ;; lldb config
    ;; (setq dap-lldb-debug-program '("/usr/local/opt/llvm/bin/lldb-vscode"))
    ;; (setq dap-lldb-debug-program '("/usr/local/bin/lldb-vscode"))
    (setq dap-print-io t)

    ;; Dap-cpptools debug configuration for reverse_string
    (dap-register-debug-template
     "cpptools::Run Configuration reverse_string"
     (list :type "cppdbg"
           :request "launch"
           :name "cpptools::Run Configuration"
           :MIMode "gdb"
           :program "${workspaceFolder}/cpp/reverse_string"
           :cwd "${workspaceFolder}/cpp"))

    ;; Debug Configuration for reverse_string.cpp
    (dap-register-debug-template
     "LLDB::Run reverse_string"
     (list :type "lldb-vscode"
           :request "launch"
           :cwd "${workspaceFolder}cpp/"
           :program "${workspaceFolder}cpp/reverse_string"
           :name "LLDB::Run reverse_string"))
    (dap-register-debug-template
     "Python :: Run unittest (buffer)"
     (list :type "python"
           :args ""
           :cwd nil
           :program nil
           :module "unittest"
           :request "launch"
           :name "Python :: Run unittest (buffer)")))

#+end_src
:END:


*** Real-GUD
Trying this debugger
#+begin_src emacs-lisp
  ;; (use-package realgud)                   ; RealGUD debugger
  ;; (use-package realgud-ipdb)              ; ipdb integration for RealGUD
#+end_src

** COMPANY MODE (Code Complettion)
COMplete ANYthing: Code completion framework.
#+begin_src emacs-lisp
  (use-package company
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    :hook
    (prog-mode . company-mode)            ; add completion to programming language modes
    (org-mode . company-mode))            ; add completion to org-mode
  ;; :config
  ;; (add-hook 'after-init-hook 'global-company-mode)


  (use-package company-box          ; Show icons in company complettions
    :hook (company-mode . company-box-mode))
#+end_src

** Flycheck (better sytax checker)
Syntax checking and linting.
#+begin_src emacs-lisp
  (use-package flycheck
    :config
    (global-flycheck-mode))
#+end_src

* Programming Languages
** SuperCollider

*** sclang-extensions (unmaintained package)
Uses AutoComplete which is not as good as Company. Hasn't been updated
for 7 years as of Oct 2022.
#+begin_src emacs-lisp
  ;; (use-package sclang-extensions)
#+end_src

*** scel (sclang' mode for emacs)
This is a mode for the sclang language for SuperCollider
#+begin_src emacs-lisp
  (setq exec-path
        (append exec-path
                '("/Applications/SuperCollider.app/Contents/MacOS/")))
  (add-to-list
   'load-path
   "~/Library/Application Support/SuperCollider/downloaded-quarks/scel/el")
  (add-to-list
   'load-path
   "~/.local/share/SuperCollider/downloaded-quarks/scel/el")
  (require 'sclang)
#+end_src

** Python
#+begin_src emacs-lisp
  ;; (use-package python
  ;;   :custom
  ;;   ;; (python-shell-interpreter "python3")
  ;;   )
#+end_src

* ORG MODE ADDONS & CONFIGS
** Org Customizations
#+begin_src emacs-lisp
  (use-package org
    :init
    (setq org-startup-indented t)
    ;; (setq org-hide-emphasis-markers t)
    ;; increase Header heights for each org level
    (custom-set-faces
     '(org-level-1 ((t (:inherit outline-1 :height 1.4))))
     '(org-level-2 ((t (:inherit outline-2 :height 1.3))))
     '(org-level-3 ((t (:inherit outline-3 :height 1.1))))
     '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
     '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
     ))
#+end_src

** Org Agenda Files
#+begin_src emacs-lisp
  (setq org-agenda-files
        '("~/hub/new_projects/orgi/orgi_plan.org"
          "~/hub/recording_bullet_journal/super_collider_projects/sc_bujo.org"
          "~/.emacs.d/config.org"))
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
#+end_src

** ORG SUPERSTAR
Adds nice looking bullets to org mode
#+begin_src emacs-lisp
  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode))
#+end_src

** Org-Roam
Slip Card system for organizing thoughts. Zettelkasten Method
#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory "~/hub/org-roam")
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert))
    :config
    (org-roam-setup))
#+end_src

** Org-Roam-UI
#+begin_src emacs-lisp
  (use-package org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

* VTERM
A very good shell in emacs
#+begin_src emacs-lisp
  (use-package vterm
    :hook (vterm-mode . (lambda ()(display-line-numbers-mode 0))))
#+end_src

* Raindbow Delimiters
Color delimiters like parens and braces according to their depth
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Helpful (better help documentation)
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    (("C-h ." . helpful-at-point))   ; show help docs for current symbol
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

* Projectile (Project Management)
#+begin_src emacs-lisp
  (use-package projectile
    :config (projectile-mode)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/hub")
      (setq projectile-project-search-path
            '("~/hub/new_projects"
              "~/hub/recording_bullet_journal/super_collider_projects")))
    (setq projectile-switch-project-action #'projectile-dired))
#+end_src




** Python
#+begin_src emacs-lisp
  (use-package python
    :custom
    (python-shell-interpreter "python3.10")
    )
#+end_src

* MY KEY BINDINGS

** EXITING EMACS
#+begin_src emacs-lisp
  ;; remap save-buffers-kill-terminal from C-x C-c to C-x q
  (global-unset-key (kbd "C-x  C-c")) ; i always accidentilly press this key
  (global-set-key (kbd "C-x q") 'save-buffers-kill-emacs)
#+end_src

** UNMAP ACCIDENTAL KEY PRESSES
#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z"))          ; unmap suspend-frame from C-z
#+end_src

** SWITCHING VISUAL BUFFERS

#+begin_src emacs-lisp
  ;; switch buffers directionally using ijkl keys similar to right hand wasd
  (global-set-key (kbd "C-c i") 'windmove-up)
  (global-set-key (kbd "C-c k") 'windmove-down)
  (global-set-key (kbd "C-c j") 'windmove-left)
  (global-set-key (kbd "C-c l") 'windmove-right)

  ;; switch buffers directionally using arrow keys
  (global-set-key (kbd "C-c <up>") 'windmove-up)
  (global-set-key (kbd "C-c <down>") 'windmove-down)
  (global-set-key (kbd "C-c <left>") 'windmove-left)
  (global-set-key (kbd "C-c <right>") 'windmove-right)

  ;; add C-c o binding to other-window
  (global-set-key (kbd "C-c o") 'other-window)
#+end_src

** SCROLL UP/DOWN LINES WITH: M-j M-k
#+begin_src emacs-lisp
  (global-unset-key (kbd "M-j"))       ; was default-indent-new-line
  (global-unset-key (kbd "M-k"))       ; was kill-sentence
  (global-set-key (kbd "M-j") 'scroll-up-line) ; scroll up
  (global-set-key (kbd "M-k") 'scroll-down-line) ; scroll down
#+end_src

** Whitespace Cleanup on Save
#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'whitespace-cleanup)
#+end_src

* ORG MODE ADDONS & CONFIGS
** Org Customizations
#+begin_src emacs-lisp
  (use-package org
    :init
    (setq org-startup-indented t)
    ;; (setq org-hide-emphasis-markers t)
    ;; increase Header heights for each org level
    (custom-set-faces
     '(org-level-1 ((t (:inherit outline-1 :height 1.4))))
     '(org-level-2 ((t (:inherit outline-2 :height 1.3))))
     '(org-level-3 ((t (:inherit outline-3 :height 1.1))))
     '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
     '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
     ))
#+end_src

** Org Agenda Files
#+begin_src emacs-lisp
  (setq org-agenda-files
        '("~/hub/new_projects/orgi/orgi_plan.org"
          "~/hub/recording_bullet_journal/super_collider_projects/sc_bujo.org"
          "~/.emacs.d/config.org"))
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
#+end_src

** ORG SUPERSTAR
Adds nice looking bullets to org mode
#+begin_src emacs-lisp
  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode))
#+end_src

** Org-Roam
Slip Card system for organizing thoughts. Zettelkasten Method
#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory "~/hub/org-roam")
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert))
    :config
    (org-roam-setup))
#+end_src

** Org-Roam-UI
#+begin_src emacs-lisp
  (use-package org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

* VTERM
A very good shell in emacs
#+begin_src emacs-lisp
  (use-package vterm
    :hook (vterm-mode . (lambda ()(display-line-numbers-mode 0))))
#+end_src

* Raindbow Delimiters
Color delimiters like parens and braces according to their depth
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Helpful (better help documentation)
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    (("C-h ." . helpful-at-point))   ; show help docs for current symbol
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

* Projectile (Project Management)
#+begin_src emacs-lisp
  (use-package projectile
    :config (projectile-mode)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/hub")
      (setq projectile-project-search-path
            '("~/hub/new_projects"
              "~/hub/recording_bullet_journal/super_collider_projects")))
    (setq projectile-switch-project-action #'projectile-dired))
#+end_src

* w3m (Web Browser for emacs)
Installed this to browse Help documentation for SuperCollider
#+begin_src emacs-lisp
  (use-package w3m)
#+end_src

* DASHBOARD
#+begin_src emacs-lisp
  (use-package dashboard
    :init
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-center-content nil)
    (setq dashboard-projects-backend 'projectile)
    (setq dashboard-items '((agenda . 5)
                            (projects . 5)
                            (bookmarks . 3)
                            (recents . 7)
                            ))
    (setq dashboard-page-separator "\n\f\n")
    (setq dashboard-agenda-sort-strategy '(time-up))
    (setq dashboard-agenda-time-string-format "%b %d %Y %a ")
    :config
    (dashboard-setup-startup-hook))

#+end_src

** PAGE BREAK LINES
#+begin_src emacs-lisp
  (use-package page-break-lines
    :config (page-break-lines-mode))
#+End_src
